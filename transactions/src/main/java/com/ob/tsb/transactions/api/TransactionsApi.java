/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ob.tsb.transactions.api;

import com.ob.tsb.transactions.model.response.TransactionsResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-14T20:54:23.886922600+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "transactions", description = "the transactions API")
public interface TransactionsApi {

    /**
     * GET /api/v1/health-check : Transaction MS Health Check
     *
     * @param authorization  (optional)
     * @param xFapiAuthDate  (optional)
     * @param xFapiCustomerIpAddress  (optional)
     * @param xFapiInteractionId  (optional)
     * @param accept  (optional)
     * @return Checking Transactions MS Health (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "healthCheck",
        summary = "Transaction MS Health Check",
        tags = { "transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Checking Transactions MS Health", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/health-check",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<String>> _healthCheck(
        @Parameter(name = "Authorization", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Authorization", required = false) String authorization,
        @Parameter(name = "x-fapi-auth-date", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-auth-date", required = false) String xFapiAuthDate,
        @Parameter(name = "x-fapi-customer-ip-address", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-customer-ip-address", required = false) String xFapiCustomerIpAddress,
        @Parameter(name = "x-fapi-interaction-id", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "x-fapi-interaction-id", required = false) String xFapiInteractionId,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return healthCheck(authorization, xFapiAuthDate, xFapiCustomerIpAddress, xFapiInteractionId, accept, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<String>> healthCheck(String authorization, String xFapiAuthDate, String xFapiCustomerIpAddress, String xFapiInteractionId, String accept,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/v1/accounts/{AccountId}/transactions : Get transaction details by Id
     *
     * @param accountId Account ID (required)
     * @return Transaction detail by Id information retrieved successfully (status code 200)
     */
    @Operation(
        operationId = "transactionsById",
        summary = "Get transaction details by Id",
        tags = { "transactions" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Transaction detail by Id information retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TransactionsResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{AccountId}/transactions",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<TransactionsResponse>> _transactionsById(
        @Parameter(name = "AccountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("AccountId") String accountId,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return transactionsById(accountId, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<TransactionsResponse>> transactionsById(String accountId,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        for (MediaType mediaType : exchange.getRequest().getHeaders().getAccept()) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                String exampleString = "{ \"Meta\" : { \"LastAvailableDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"FirstAvailableDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"TotalPages\" : 0 }, \"Links\" : { \"Self\" : \"Self\" }, \"Data\" : { \"Transaction\" : [ { \"Status\" : \"Status\", \"TransactionInformation\" : \"TransactionInformation\", \"BookingDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"AccountId\" : \"AccountId\", \"TransactionReference\" : \"TransactionReference\", \"BankTransactionCode\" : { \"SubCode\" : \"SubCode\", \"Code\" : \"Code\" }, \"ProprietaryBankTransactionCode\" : { \"Issuer\" : \"Issuer\", \"Code\" : \"Code\" }, \"Amount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"ValueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"CreditDebitIndicator\" : \"CreditDebitIndicator\", \"Balance\" : { \"Type\" : \"Type\", \"Amount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"CreditDebitIndicator\" : \"CreditDebitIndicator\" }, \"TransactionId\" : \"TransactionId\" }, { \"Status\" : \"Status\", \"TransactionInformation\" : \"TransactionInformation\", \"BookingDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"AccountId\" : \"AccountId\", \"TransactionReference\" : \"TransactionReference\", \"BankTransactionCode\" : { \"SubCode\" : \"SubCode\", \"Code\" : \"Code\" }, \"ProprietaryBankTransactionCode\" : { \"Issuer\" : \"Issuer\", \"Code\" : \"Code\" }, \"Amount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"ValueDateTime\" : \"2000-01-23T04:56:07.000+00:00\", \"CreditDebitIndicator\" : \"CreditDebitIndicator\", \"Balance\" : { \"Type\" : \"Type\", \"Amount\" : { \"Amount\" : \"Amount\", \"Currency\" : \"Currency\" }, \"CreditDebitIndicator\" : \"CreditDebitIndicator\" }, \"TransactionId\" : \"TransactionId\" } ] } }";
                result = ApiUtil.getExampleResponse(exchange, mediaType, exampleString);
                break;
            }
        }
        return result.then(Mono.empty());

    }

}
