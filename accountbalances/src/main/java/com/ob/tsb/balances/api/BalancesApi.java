/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ob.tsb.balances.api;

import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import org.springframework.http.codec.multipart.Part;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-05T13:18:51.291297100+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "balances", description = "the balances API")
public interface BalancesApi {

    /**
     * GET /api/v1/balances : Get balance details
     *
     * @param accept  (optional)
     * @return Balances information retrieved successfully (status code 200)
     */
    @Operation(
        operationId = "balances",
        summary = "Get balance details",
        tags = { "balances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Balances information retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/balances",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Object>> _balances(
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return balances(accept, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Object>> balances(String accept,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/v1/accounts/{AccountId}/balances : Get balance details by Id
     *
     * @param accountId Account ID (required)
     * @param accept  (optional)
     * @return Balance detail by Id information retrieved successfully (status code 200)
     */
    @Operation(
        operationId = "balancesById",
        summary = "Get balance details by Id",
        tags = { "balances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Balance detail by Id information retrieved successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Object.class))
            })
        },
        security = {
            @SecurityRequirement(name = "jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/accounts/{AccountId}/balances",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<Object>> _balancesById(
        @Parameter(name = "AccountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("AccountId") String accountId,
        @Parameter(name = "Accept", description = "", in = ParameterIn.HEADER) @RequestHeader(value = "Accept", required = false) String accept,
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return balancesById(accountId, accept, exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<Object>> balancesById(String accountId, String accept,  final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }


    /**
     * GET /api/v1/health-check : Balance MS Health Check
     *
     * @return Checking Balances MS Health (status code 200)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "healthCheck",
        summary = "Balance MS Health Check",
        tags = { "balances" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Checking Balances MS Health", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found")
        },
        security = {
            @SecurityRequirement(name = "jwt")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/health-check",
        produces = { "application/json" }
    )
    default Mono<ResponseEntity<String>> _healthCheck(
        @Parameter(hidden = true) final ServerWebExchange exchange
    ) {
        return healthCheck(exchange);
    }

    // Override this method
    default  Mono<ResponseEntity<String>> healthCheck( final ServerWebExchange exchange) {
        Mono<Void> result = Mono.empty();
        exchange.getResponse().setStatusCode(HttpStatus.NOT_IMPLEMENTED);
        return result.then(Mono.empty());

    }

}
